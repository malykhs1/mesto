(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function t(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var n=function(){function n(e,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t(this,"_hasInvalidInput",(function(){return o._inputList.some((function(e){return!e.validity.valid}))})),t(this,"toggleButtonState",(function(){o._hasInvalidInput()?o.disableSubmitButton():(o._buttonElement.classList.remove(o._submitButtonUnactive),o._buttonElement.disabled=!1)})),t(this,"disableSubmitButton",(function(){o._buttonElement.classList.add(o._submitButtonUnactive),o._buttonElement.disabled=!0})),t(this,"_showInputError",(function(e,t){var n=o._form.querySelector(".".concat(e.id,"-error"));e.classList.add(o._inputErrorClass),n.classList.add(o._errorClass),n.textContent=t})),t(this,"_hideInputError",(function(e){var t=o._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(o._inputErrorClass),t.classList.remove(o._errorClass),t.textContent=""})),t(this,"_isValid",(function(e){e.validity.valid?o._hideInputError(e):o._showInputError(e,e.validationMessage)})),t(this,"_setEventListeners",(function(){o._inputList.forEach((function(e){e.addEventListener("input",(function(){o._isValid(e),o.toggleButtonState()}))}))})),t(this,"enableValidation",(function(){o._setEventListeners(),o._form.addEventListener("submit",(function(e){e.preventDefault()}))})),this._formElement=e.formElement,this._inputElement=e.inputElement,this._submitButton=e.submitButton,this._submitButtonUnactive=e.submitButtonUnactive,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=r,this._buttonElement=this._form.querySelector(this._submitButton),this._inputList=Array.from(this._form.querySelectorAll(this._inputElement))}var r,o;return r=n,(o=[{key:"resetValidation",value:function(){var e=this;this.toggleButtonState(),this._inputList.forEach((function(t){e._hideInputError(t)}))}}])&&e(r.prototype,o),n}();function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=function(){function e(t){var n=this,r=t.data,i=t.cardSelector,u=t.userId,a=t.handlers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o(this,"_toggleLIke",(function(){n._handleLikeClick(n._cardId,n.isLiked).then((function(e){n._likeButton.classList.toggle("card__like_active"),n.isLiked=!n.isLiked,n._likesCounter.textContent=e.likes.length})).catch((function(e){console.log(e)}))})),o(this,"likeCardClickByUser",(function(e){n._likes.some((function(e){return e._id===n._userId}))&&n._likeButton.classList.add("card__like_active")})),o(this,"updateLikes",(function(e){n._likesCounter.textContent=n._likes.length})),o(this,"_deleteCheck",(function(){n._userId!==n._ownerId?n._deleteButton.classList.add("card__delete-button_hiden"):n._deleteButton.classList.remove("card__delete-button_hiden")})),o(this,"_setEventListeners",(function(){n._likeButton.addEventListener("click",(function(){n._toggleLIke()})),n._deleteButton.addEventListener("click",(function(){n._handleDeleteButton()})),n._cardImage.addEventListener("click",(function(){n._handleCardClick(n._name,n._link)}))})),o(this,"deleteCard",(function(){n._element.remove(),n._element=null})),this._name=r.name,this._link=r.link,this._ownerId=r.owner._id,this._likes=r.likes,this._cardId=r._id,this._userId=u,this._cardSelector=i,this._handleCardClick=a.handleCardClick,this._handleLikeClick=a.handleLikeClick,this._handleDeleteButton=a.handleDeleteButton}var t,n;return t=e,(n=[{key:"getCardId",value:function(){return this._cardId}},{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._cardTitle=this._element.querySelector(".card__title"),this._cardImage=this._element.querySelector(".card__image"),this._likeButton=this._element.querySelector(".card__like"),this._likesCounter=this._element.querySelector(".card__likes-counter"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._cardImage.src=this._link,this._deleteCheck(),this._setEventListeners(),this._element}}])&&r(t.prototype,n),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t){var n=t.renderer,r=t.container;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._container=r,this._renderer=n}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){return t._renderer(e)}))}},{key:"setItem",value:function(e){this._container.prepend(e)}}])&&u(t.prototype,n),e}();function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=t,this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"_handleCloseByOverlay",value:function(e){e.target===e.currentTarget&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup__close-button").addEventListener("click",(function(){e.close()})),this._popup.addEventListener("click",(function(t){e._handleCloseByOverlay(t)}))}}])&&c(t.prototype,n),e}();function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t,n){return(p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _(e){return(_=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=_(r);if(o){var n=_(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return d(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._popupImage=t._popup.querySelector(".popup__image"),t._popupTitleImage=t._popup.querySelector(".popup__title"),t}return t=u,(n=[{key:"open",value:function(e,t){p(_(u.prototype),"open",this).call(this),this._popupTitleImage.textContent=e,this._popupImage.alt=t,this._popupImage.src=t}}])&&f(t.prototype,n),u}(l);function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e,t,n){return(b="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(r);if(o){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return g(this,e)});function u(e){var t,n=e.popupSelector,r=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,n))._popupForm=t._popup.querySelector(".popup__form"),t._inputList=t._popupForm.querySelectorAll(".popup__input"),t._handleFormSubmit=r,t}return t=u,(n=[{key:"_getInputValues",value:function(){var e=this;return this._inputObject={},this._inputList.forEach((function(t){return e._inputObject[t.name]=t.value})),this._inputObject}},{key:"setEventListeners",value:function(){var e=this;b(E(u.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues())}))}},{key:"close",value:function(){this._popupForm.reset(),b(E(u.prototype),"close",this).call(this)}}])&&v(t.prototype,n),u}(l);function C(e){return(C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(e,t,n){return(O="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=j(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function L(e,t){return(L=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function I(e,t){return!t||"object"!==C(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var B=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&L(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=j(r);if(o){var n=j(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return I(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._popupForm=t._popup.querySelector(".popup__form"),t._confirmButton=t._popup.querySelector(".popup__save-button"),t}return t=u,(n=[{key:"setEventListeners",value:function(){var e=this;console.log(this._popupForm),this._popupForm.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmitCallback()})),O(j(u.prototype),"setEventListeners",this).call(this)}},{key:"setNewHandler",value:function(e){this._handleFormSubmitCallback=e}},{key:"renderButtonText",value:function(e){this._confirmButton.textContent=e?"Удаление...":"Да"}}])&&w(t.prototype,n),u}(l);function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var R=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=t,this._userJob=n,this._userAvatar=r}var t,n;return t=e,(n=[{key:"setUserInfo",value:function(e){this._userName.textContent=e.name,this._userJob.textContent=e.about,this._userAvatar.src=e.avatar}},{key:"getUserInfo",value:function(){var e={};return e.name=this._userName.textContent,e.job=this._userJob.textContent,e.avatar=this._userAvatar.src,e}}])&&P(t.prototype,n),e}();function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var T=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.url,this._headers=t.headers}var t,n;return t=e,(n=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("Ошибка ".concat(e.status))}},{key:"getServerCards",value:function(){return fetch("".concat(this._url,"/cards"),{method:"GET",headers:this._headers}).then(this._checkResponse)}},{key:"getUserInfo",value:function(){return fetch("".concat(this._url,"/users/me"),{method:"GET",headers:this._headers}).then(this._checkResponse)}},{key:"addNewCard",value:function(e,t){return fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse)}},{key:"setUserInfo",value:function(e,t){return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}},{key:"setAvatar",value:function(e){return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}},{key:"likeCard",value:function(e,t){return fetch("".concat(this._url,"/cards/likes/").concat(e),{method:t?"DELETE":"PUT",headers:this._headers}).then(this._checkResponse)}},{key:"deleteCardRequest",value:function(e){return fetch("".concat(this._url,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}])&&q(t.prototype,n),e}(),x={formElement:".popup__form",inputElement:".popup__input",submitButton:".popup__save-button",submitButtonUnactive:"popup__save-button-unvalid",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"},U=document.querySelector(".popup_type_id"),A=document.querySelector(".popup_type_avatar"),F=document.getElementById("form-edit-profile"),D=document.getElementById("form-edit-avatar"),V=document.querySelector(".profile__edit-button"),N=document.querySelector(".profile__avatar-button"),J=document.getElementById("name"),H=document.getElementById("job"),G=document.querySelector(".profile__name"),M=document.querySelector(".profile__job"),z=document.querySelector(".profile__avatar"),$=document.getElementById("form-edit-card"),K=document.querySelector(".popup_type_form"),Q=document.querySelector(".profile__add-button"),W=document.querySelector(".popup_type_image"),X=document.querySelector(".popup_type_confirm");function Y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Z(e,t){ce.open(e,t)}function ee(e){var t=new i({data:e,cardSelector:"#card-template",userId:le,handlers:{handleLikeClick:function(e,t){return se.likeCard(e,t)},handleCardClick:Z,handleDeleteButton:function(){return function(e){ae.open(),ae.setNewHandler((function(){ae.renderButtonText(!0),se.deleteCardRequest(e.getCardId()).then((function(){e.deleteCard(),ae.close()})).catch((function(e){console.log(e)})).finally((function(){ae.renderButtonText(!1)}))}))}(t)}}}),n=t.generateCard();return t.likeCardClickByUser(n),t.updateLikes(n),n}document.querySelector(".card__image"),document.querySelector(".card__like");var te=new a({renderer:function(e){te.setItem(ee(e))},container:document.querySelector(".elements")}),ne=new S({popupSelector:K,handleFormSubmit:function(e){ie(K,!0),se.addNewCard(e.title,e.link).then((function(e){var t=ee(e);te.setItem(t),ne.close()})).catch((function(e){console.log(e)})).finally((function(){ie(K,!1)}))}});ne.setEventListeners();var re=new S({popupSelector:U,handleFormSubmit:function(e){ie(U,!0),se.setUserInfo(e.name,e.job).then((function(e){ue.setUserInfo(e),re.close()})).catch((function(e){console.log(e)})).finally((function(){ie(U,!1)}))}});re.setEventListeners();var oe=new S({popupSelector:A,handleFormSubmit:function(e){ie(A,!0),se.setAvatar(e.avatar).then((function(e){ue.setUserInfo(e),oe.close()})).catch((function(e){console.log(e)})).finally((function(){ie(A,!1)}))}});function ie(e,t){e.querySelector(".popup__save-button").textContent=t?"Сохранение...":"Сохранить"}oe.setEventListeners();var ue=new R(G,M,z),ae=new B(X);ae.setEventListeners();var ce=new y(W);ce.setEventListeners(),Q.addEventListener("click",(function(){ne.open(),pe.resetValidation()})),V.addEventListener("click",(function(){var e=ue.getUserInfo();J.value=e.name,H.value=e.job,re.open(),fe.resetValidation()})),N.addEventListener("click",(function(){oe.open(),he.resetValidation()}));var le,se=new T({url:"https://mesto.nomoreparties.co/v1/cohort-26",headers:{"content-type":"application/json",authorization:"b22e628d-a32e-4f98-97fa-aa25d8506b10"}});Promise.all([se.getServerCards(),se.getUserInfo()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],u=!0,a=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);u=!0);}catch(e){a=!0,o=e}finally{try{u||null==n.return||n.return()}finally{if(a)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Y(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];ue.setUserInfo(i),le=i._id,te.renderItems(o)})).catch((function(e){console.log(e)}));var fe=new n(x,F);fe.enableValidation();var pe=new n(x,$);pe.enableValidation();var he=new n(x,D);he.enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,